// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.ebs_plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class EbsPlugin.g {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class EbsResult {
    private @NonNull Boolean success;

    public @NonNull Boolean getSuccess() {
      return success;
    }

    public void setSuccess(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"success\" is null.");
      }
      this.success = setterArg;
    }

    private @NonNull String message;

    public @NonNull String getMessage() {
      return message;
    }

    public void setMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"message\" is null.");
      }
      this.message = setterArg;
    }

    private @Nullable String data;

    public @Nullable String getData() {
      return data;
    }

    public void setData(@Nullable String setterArg) {
      this.data = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    EbsResult() {}

    public static final class Builder {

      private @Nullable Boolean success;

      public @NonNull Builder setSuccess(@NonNull Boolean setterArg) {
        this.success = setterArg;
        return this;
      }

      private @Nullable String message;

      public @NonNull Builder setMessage(@NonNull String setterArg) {
        this.message = setterArg;
        return this;
      }

      private @Nullable String data;

      public @NonNull Builder setData(@Nullable String setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull EbsResult build() {
        EbsResult pigeonReturn = new EbsResult();
        pigeonReturn.setSuccess(success);
        pigeonReturn.setMessage(message);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(success);
      toListResult.add(message);
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull EbsResult fromList(@NonNull ArrayList<Object> list) {
      EbsResult pigeonResult = new EbsResult();
      Object success = list.get(0);
      pigeonResult.setSuccess((Boolean) success);
      Object message = list.get(1);
      pigeonResult.setMessage((String) message);
      Object data = list.get(2);
      pigeonResult.setData((String) data);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class NativeHostApiCodec extends StandardMessageCodec {
    public static final NativeHostApiCodec INSTANCE = new NativeHostApiCodec();

    private NativeHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return EbsResult.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof EbsResult) {
        stream.write(128);
        writeValue(stream, ((EbsResult) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NativeHostApi {

    void initializeEbsAdapter(@NonNull String config, @NonNull Result<EbsResult> result);

    void authenticateUser(@NonNull String username, @NonNull String password, @NonNull Result<EbsResult> result);

    void verifyCertificate(@NonNull String certificateData, @NonNull Result<EbsResult> result);

    void signDocument(@NonNull String documentData, @NonNull Result<EbsResult> result);

    void getCertificateInfo(@NonNull String certificateData, @NonNull Result<EbsResult> result);

    void encryptData(@NonNull String data, @NonNull String publicKey, @NonNull Result<EbsResult> result);

    void decryptData(@NonNull String encryptedData, @NonNull String privateKey, @NonNull Result<EbsResult> result);

    void validateDocument(@NonNull String documentData, @NonNull Result<EbsResult> result);

    void sendDocument(@NonNull String documentData, @NonNull String recipient, @NonNull Result<EbsResult> result);

    void getDocumentStatus(@NonNull String documentId, @NonNull Result<EbsResult> result);

    /** The codec used by NativeHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return NativeHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `NativeHostApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable NativeHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.initializeEbsAdapter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String configArg = (String) args.get(0);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.initializeEbsAdapter(configArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.authenticateUser", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String usernameArg = (String) args.get(0);
                String passwordArg = (String) args.get(1);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.authenticateUser(usernameArg, passwordArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.verifyCertificate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String certificateDataArg = (String) args.get(0);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.verifyCertificate(certificateDataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.signDocument", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String documentDataArg = (String) args.get(0);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signDocument(documentDataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.getCertificateInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String certificateDataArg = (String) args.get(0);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getCertificateInfo(certificateDataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.encryptData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String dataArg = (String) args.get(0);
                String publicKeyArg = (String) args.get(1);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.encryptData(dataArg, publicKeyArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.decryptData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String encryptedDataArg = (String) args.get(0);
                String privateKeyArg = (String) args.get(1);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.decryptData(encryptedDataArg, privateKeyArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.validateDocument", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String documentDataArg = (String) args.get(0);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.validateDocument(documentDataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.sendDocument", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String documentDataArg = (String) args.get(0);
                String recipientArg = (String) args.get(1);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.sendDocument(documentDataArg, recipientArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.getDocumentStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String documentIdArg = (String) args.get(0);
                Result<EbsResult> resultCallback =
                    new Result<EbsResult>() {
                      public void success(EbsResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getDocumentStatus(documentIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
