// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ru.example.app;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class NativeApi {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class EbsResultData {
    private @Nullable String secret;

    public @Nullable String getSecret() {
      return secret;
    }

    public void setSecret(@Nullable String setterArg) {
      this.secret = setterArg;
    }

    private @Nullable String errorString;

    public @Nullable String getErrorString() {
      return errorString;
    }

    public void setErrorString(@Nullable String setterArg) {
      this.errorString = setterArg;
    }

    private @NonNull Boolean isError;

    public @NonNull Boolean getIsError() {
      return isError;
    }

    public void setIsError(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isError\" is null.");
      }
      this.isError = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    EbsResultData() {}

    public static final class Builder {

      private @Nullable String secret;

      public @NonNull Builder setSecret(@Nullable String setterArg) {
        this.secret = setterArg;
        return this;
      }

      private @Nullable String errorString;

      public @NonNull Builder setErrorString(@Nullable String setterArg) {
        this.errorString = setterArg;
        return this;
      }

      private @Nullable Boolean isError;

      public @NonNull Builder setIsError(@NonNull Boolean setterArg) {
        this.isError = setterArg;
        return this;
      }

      public @NonNull EbsResultData build() {
        EbsResultData pigeonReturn = new EbsResultData();
        pigeonReturn.setSecret(secret);
        pigeonReturn.setErrorString(errorString);
        pigeonReturn.setIsError(isError);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(secret);
      toListResult.add(errorString);
      toListResult.add(isError);
      return toListResult;
    }

    static @NonNull EbsResultData fromList(@NonNull ArrayList<Object> list) {
      EbsResultData pigeonResult = new EbsResultData();
      Object secret = list.get(0);
      pigeonResult.setSecret((String) secret);
      Object errorString = list.get(1);
      pigeonResult.setErrorString((String) errorString);
      Object isError = list.get(2);
      pigeonResult.setIsError((Boolean) isError);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class NativeHostApiCodec extends StandardMessageCodec {
    public static final NativeHostApiCodec INSTANCE = new NativeHostApiCodec();

    private NativeHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return EbsResultData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof EbsResultData) {
        stream.write(128);
        writeValue(stream, ((EbsResultData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NativeHostApi {

    void isInstalledApp(@NonNull Result<Boolean> result);

    void getAppName(@NonNull Result<String> result);

    void getRequestInstallAppText(@NonNull Result<String> result);

    void requestInstallApp(@NonNull Result<Boolean> result);

    void requestVerification(@NonNull String infoSystem, @NonNull String adapterUri, @NonNull String sid, @NonNull String dboKoUri, @NonNull String dbkKoPublicUri, @NonNull Result<EbsResultData> result);

    /** The codec used by NativeHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return NativeHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `NativeHostApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable NativeHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.isInstalledApp", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isInstalledApp(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.getAppName", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getAppName(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.getRequestInstallAppText", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getRequestInstallAppText(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.requestInstallApp", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.requestInstallApp(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ebs_plugin.NativeHostApi.requestVerification", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String infoSystemArg = (String) args.get(0);
                String adapterUriArg = (String) args.get(1);
                String sidArg = (String) args.get(2);
                String dboKoUriArg = (String) args.get(3);
                String dbkKoPublicUriArg = (String) args.get(4);
                Result<EbsResultData> resultCallback =
                    new Result<EbsResultData>() {
                      public void success(EbsResultData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.requestVerification(infoSystemArg, adapterUriArg, sidArg, dboKoUriArg, dbkKoPublicUriArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
