// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct EbsResultData {
  var secret: String? = nil
  var errorString: String? = nil
  var isError: Bool

  static func fromList(_ list: [Any?]) -> EbsResultData? {
    let secret: String? = nilOrValue(list[0])
    let errorString: String? = nilOrValue(list[1])
    let isError = list[2] as! Bool

    return EbsResultData(
      secret: secret,
      errorString: errorString,
      isError: isError
    )
  }
  func toList() -> [Any?] {
    return [
      secret,
      errorString,
      isError,
    ]
  }
}

private class NativeHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return EbsResultData.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class NativeHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? EbsResultData {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NativeHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativeHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativeHostApiCodecWriter(data: data)
  }
}

class NativeHostApiCodec: FlutterStandardMessageCodec {
  static let shared = NativeHostApiCodec(readerWriter: NativeHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeHostApi {
  func isInstalledApp(completion: @escaping (Result<Bool, Error>) -> Void)
  func getAppName(completion: @escaping (Result<String, Error>) -> Void)
  func getRequestInstallAppText(completion: @escaping (Result<String, Error>) -> Void)
  func requestInstallApp(completion: @escaping (Result<Bool, Error>) -> Void)
  func requestVerification(infoSystem: String, adapterUri: String, sid: String, dboKoUri: String, dbkKoPublicUri: String, completion: @escaping (Result<EbsResultData, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeHostApiSetup {
  /// The codec used by NativeHostApi.
  static var codec: FlutterStandardMessageCodec { NativeHostApiCodec.shared }
  /// Sets up an instance of `NativeHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeHostApi?) {
    let isInstalledAppChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ebs_plugin.NativeHostApi.isInstalledApp", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isInstalledAppChannel.setMessageHandler { _, reply in
        api.isInstalledApp() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      isInstalledAppChannel.setMessageHandler(nil)
    }
    let getAppNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ebs_plugin.NativeHostApi.getAppName", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAppNameChannel.setMessageHandler { _, reply in
        api.getAppName() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAppNameChannel.setMessageHandler(nil)
    }
    let getRequestInstallAppTextChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ebs_plugin.NativeHostApi.getRequestInstallAppText", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getRequestInstallAppTextChannel.setMessageHandler { _, reply in
        api.getRequestInstallAppText() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getRequestInstallAppTextChannel.setMessageHandler(nil)
    }
    let requestInstallAppChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ebs_plugin.NativeHostApi.requestInstallApp", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestInstallAppChannel.setMessageHandler { _, reply in
        api.requestInstallApp() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestInstallAppChannel.setMessageHandler(nil)
    }
    let requestVerificationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ebs_plugin.NativeHostApi.requestVerification", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestVerificationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let infoSystemArg = args[0] as! String
        let adapterUriArg = args[1] as! String
        let sidArg = args[2] as! String
        let dboKoUriArg = args[3] as! String
        let dbkKoPublicUriArg = args[4] as! String
        api.requestVerification(infoSystem: infoSystemArg, adapterUri: adapterUriArg, sid: sidArg, dboKoUri: dboKoUriArg, dbkKoPublicUri: dbkKoPublicUriArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestVerificationChannel.setMessageHandler(nil)
    }
  }
}
