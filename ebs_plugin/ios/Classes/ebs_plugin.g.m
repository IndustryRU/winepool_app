// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "ebs_plugin.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface EbsResult ()
+ (EbsResult *)fromList:(NSArray *)list;
+ (nullable EbsResult *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation EbsResult
+ (instancetype)makeWithSuccess:(NSNumber *)success
    message:(NSString *)message
    data:(nullable NSString *)data {
  EbsResult* pigeonResult = [[EbsResult alloc] init];
  pigeonResult.success = success;
  pigeonResult.message = message;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (EbsResult *)fromList:(NSArray *)list {
  EbsResult *pigeonResult = [[EbsResult alloc] init];
  pigeonResult.success = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.success != nil, @"");
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.message != nil, @"");
  pigeonResult.data = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable EbsResult *)nullableFromList:(NSArray *)list {
  return (list) ? [EbsResult fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.success ?: [NSNull null]),
    (self.message ?: [NSNull null]),
    (self.data ?: [NSNull null]),
  ];
}
@end

@interface NativeHostApiCodecReader : FlutterStandardReader
@end
@implementation NativeHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [EbsResult fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface NativeHostApiCodecWriter : FlutterStandardWriter
@end
@implementation NativeHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[EbsResult class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface NativeHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NativeHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NativeHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NativeHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NativeHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    NativeHostApiCodecReaderWriter *readerWriter = [[NativeHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpNativeHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NativeHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.initializeEbsAdapter"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeEbsAdapterConfig:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(initializeEbsAdapterConfig:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_config = GetNullableObjectAtIndex(args, 0);
        [api initializeEbsAdapterConfig:arg_config completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.authenticateUser"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(authenticateUserUsername:password:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(authenticateUserUsername:password:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_username = GetNullableObjectAtIndex(args, 0);
        NSString *arg_password = GetNullableObjectAtIndex(args, 1);
        [api authenticateUserUsername:arg_username password:arg_password completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.verifyCertificate"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(verifyCertificateCertificateData:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(verifyCertificateCertificateData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_certificateData = GetNullableObjectAtIndex(args, 0);
        [api verifyCertificateCertificateData:arg_certificateData completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.signDocument"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signDocumentDocumentData:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(signDocumentDocumentData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_documentData = GetNullableObjectAtIndex(args, 0);
        [api signDocumentDocumentData:arg_documentData completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.getCertificateInfo"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCertificateInfoCertificateData:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(getCertificateInfoCertificateData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_certificateData = GetNullableObjectAtIndex(args, 0);
        [api getCertificateInfoCertificateData:arg_certificateData completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.encryptData"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(encryptDataData:publicKey:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(encryptDataData:publicKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_data = GetNullableObjectAtIndex(args, 0);
        NSString *arg_publicKey = GetNullableObjectAtIndex(args, 1);
        [api encryptDataData:arg_data publicKey:arg_publicKey completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.decryptData"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(decryptDataEncryptedData:privateKey:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(decryptDataEncryptedData:privateKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_encryptedData = GetNullableObjectAtIndex(args, 0);
        NSString *arg_privateKey = GetNullableObjectAtIndex(args, 1);
        [api decryptDataEncryptedData:arg_encryptedData privateKey:arg_privateKey completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.validateDocument"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(validateDocumentDocumentData:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(validateDocumentDocumentData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_documentData = GetNullableObjectAtIndex(args, 0);
        [api validateDocumentDocumentData:arg_documentData completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.sendDocument"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendDocumentDocumentData:recipient:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(sendDocumentDocumentData:recipient:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_documentData = GetNullableObjectAtIndex(args, 0);
        NSString *arg_recipient = GetNullableObjectAtIndex(args, 1);
        [api sendDocumentDocumentData:arg_documentData recipient:arg_recipient completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ebs_plugin.NativeHostApi.getDocumentStatus"
        binaryMessenger:binaryMessenger
        codec:NativeHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDocumentStatusDocumentId:completion:)], @"NativeHostApi api (%@) doesn't respond to @selector(getDocumentStatusDocumentId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_documentId = GetNullableObjectAtIndex(args, 0);
        [api getDocumentStatusDocumentId:arg_documentId completion:^(EbsResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
